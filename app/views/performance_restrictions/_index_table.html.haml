:ruby
  table_dom_id = SecureRandom.hex


:css

= javascript_include_tag  "https://kit.fontawesome.com/#{ENV['FONT_AWESOME']}.js"
.library-table
  %table.elbat{:id => table_dom_id,
    use: 'true',
    data: {:use => 'true',
      side: 'client',
      current_page: '0',
      current_page_size: '10',
      page_sizes: "10,20,50,100,200",
      search: 'client',
      export: "['csv', 'txt', 'excel']",
      columns: "Asset ID,drilldown-link,
                  Organization,
                  Description,
                  Subtype,
                  From Line,
                  From,
                  To Line,
                  To,
                  Track,
                  Max Permissible Speed,
                  Max Permissible Speed Unit,
                  Speed Restriction,
                  Speed Restriction Unit,
                  Restriction Cause,
                  Active Start,right-align,
                  Active End,right-align,
                  Submitted By,
                  Status,
                  Comments,
                  Actions,action-column center-align",
      selected_columns: "Asset ID,
                  Organization,
                  Description,
                  Subtype,
                  From Line,
                  From,
                  To Line,
                  To,
                  Track,
                  Max Permissible Speed,
                  Max Permissible Speed Unit,
                  Speed Restriction,
                  Speed Restriction Unit,
                  Restriction Cause,
                  Active Start,
                  Active End,
                  Submitted By,
                  Actions",
      cookies: "true",
      sort: 'client',
      params: "{}",
      filter: "[]",
      data_source: 'client',
      url: ''}}


  - restrictions.each_with_index do |r, index|
    %div.actions
      - evt = r.allowable_events.first
      - if can? evt.to_sym, r
        = link_to fire_workflow_event_inventory_asset_event_path(r.send(Rails.application.config.asset_base_class_name.underscore), r, :event => evt), class: "btn btn-primary btn-xs" do
          = "#{evt.titleize}"


    :javascript
      add_row('#{table_dom_id}',
        {
          "Asset ID": '#{h link_to r.id, performance_restrictions_path(r)}',
          "Organization": '#{h r.transam_asset.organization}',
          "Description": '#{h r.transam_asset.description}',
          "Subtype": '#{h r.transam_asset.asset_subtype}',
          "From Line": '#{h r.from_line}',
          "From": '#{h format_as_decimal(r.from_segment)}',
          "To Line": '#{h r.to_line}',
          "To": '#{h format_as_decimal(r.to_segment)}',
          "Track": '#{h InfrastructureTrack.find_by(id: r.transam_asset.infrastructure_track_id)}',
          "Max Permissible Speed": '#{h format_as_integer(r.transam_asset.max_permissible_speed)}',
          "Max Permissible Speed Unit": '#{h r.transam_asset.max_permissible_speed_unit}',
          "Speed Restriction": '#{h format_as_integer(r.speed_restriction)}',
          "Speed Restriction Unit": '#{h r.speed_restriction_unit}',
          "Restriction Cause": '#{h r.performance_restriction_type}',
          "Active Start": '#{h format_as_date_time(r.start_datetime)}',
          "Active End": '#{h r.end_datetime.present? ? format_as_date_time(r.end_datetime): "Until Removed"}',
          "Submitted By": '#{h r.creator}',
        }, #{index});
        // TEMP UNTIL WE DO THIS FOR REAL
        // TODO: PLEASE DON'T LET THIS GO TO PRODUCTION
        // HACKY HACK IS HACKY
        $(".row-item").eq(#{index}).ready(function (){
          let cell = $("##{table_dom_id} .action-column").eq(#{index}).find(".cell-text");
          $(".actions").eq(#{index}).detach().appendTo(cell);
        });




