:ruby
  if @rule.new_record?
    url = add_policy_rule_policy_path(@policy)
  else
    url = update_policy_rule_policy_path(@policy)
  end
  mileage_vehicles = ["Vehicle", "SupportVehicle"]
  all_vehicles = ["Vehicle", "SupportVehicle", "Locomotive", "RailCar"]
  asset_type_class_name = @asset_type.class_name

  min_values = @rule.min_allowable_policy_values.merge(@rule.min_allowable_mileages)

- if @notice.present?
  .alert.alert-warning.alert-dismissible{:role=> "alert"}
    %p.text-center= @notice

= simple_form_for(@rule,
  :url => url,
  :remote => true,
  :html => {:class => 'form-vertical', :autocomplete => 'off', :id => 'edit-form'},
  :wrapper => :vertical_form,
  :wrapper_mappings => {:check_boxes => :vertical_radio_and_checkboxes,
  :radio_buttons => :vertical_radio_and_checkboxes,
  :file => :vertical_file_input,
  :boolean => :vertical_boolean}) do |f|

  = f.input :id, :as => :hidden
  = hidden_field_tag :copied_rule, @copy

  %fieldset
    %legend Replacement
    - if @rule.new_record? and !@copy
      .row
        .col-sm-3
          = f.association :asset_subtype, :collection => @valid_types, :prompt => 'New Subtype', :required => false

      #new_subtype.row
        = hidden_field_tag :new_asset_subtype_asset_type_id, @asset_type.id
        .col-sm-6
          .form-group
            %label.control-label New Asset Subtype Name
            = text_field_tag :new_asset_subtype_name, '', {class: 'form-control'}
        .col-sm-6
          .form-group
            %label.control-label New Asset Subtype Description
            = text_field_tag :new_asset_subtype_description, '', {class: 'form-control'}


    .row
      .col-sm-3
        = f.input :min_service_life_months, :required => true, :label => "ESL (Mo)", :input_html => { :class => "has_minimum", min: min_values[:min_service_life_months] }

      .col-sm-3
        = f.input :replacement_cost, :wrapper=> :vertical_prepend  do
          %span.input-group-addon
            %i.fa.fa-usd
          = f.input_field :replacement_cost, :class => "form-control", :required => true, :min => 0

      .col-sm-3
        = f.input :cost_fy_year, :required => true, :collection => get_fiscal_years(Chronic.parse(SystemConfig.instance.start_of_fiscal_year+"-#{[@rule.cost_fy_year, current_planning_year_year].min}")), :include_blank => false

      .col-sm-3
        = f.input :replace_with_new

        = f.input :replace_with_leased

      -if mileage_vehicles.include?(asset_type_class_name)
        .col-sm-3
          - if @rule.new_record? and !@copy
            - used_fuel_types = []
          - elsif @rule.new_record? and @copy
            - used_fuel_types = @policy.policy_asset_subtype_rules.where(asset_subtype: @rule.asset_subtype).pluck(:fuel_type_id)
          - else # not a new record
            - used_fuel_types = @policy.policy_asset_subtype_rules.where(asset_subtype: @rule.asset_subtype).pluck(:fuel_type_id).reject{|f| f == @rule.fuel_type_id}
          = f.input :fuel_type_id, :required => @policy.parent.present?, :collection => FuelType.active.reject{|f| used_fuel_types.include? f.id}.collect{|x| ["#{x.code}-#{x.name}", x.id]}
        .col-sm-3
          = f.input :min_service_life_miles, :required => true, :label => "ESL (Mi)", :input_html => { class: 'has_minimum', min: min_values[:min_service_life_miles] }
      .col-sm-3
        = f.input :min_used_purchase_service_life_months, :required => true, :label => "ESL Used (Mo)", :input_html =>{ class: 'has_minimum', min:  min_values[:min_used_purchase_service_life_months] }
      .col-sm-3
        = f.input :lease_length_months, :input_html => { min: min_values[:lease_length_months] }

      -if mileage_vehicles.include?(asset_type_class_name)
        .col-sm-3
          = f.input :replace_asset_subtype_id, :collection => AssetSubtype.active.where(:asset_type => @asset_type).collect{|x| [x.name, x.id]}, :input_html => {onChange: "check_replace_rule_exists()"}
        .col-sm-3
          = f.input :replace_fuel_type_id, :collection => FuelType.active.collect{|x| ["#{x.code}-#{x.name}", x.id]}, :input_html => {onChange: "check_replace_rule_exists()"}


        #add-rule-div.col-sm-6{:style => 'margin-top: 5px;'}
          .col-sm-6
            .alert.alert-warning{:role => 'alert', :style => 'width: 100%;margin-botton: 5px;'}
              %p.text-center= "<strong>Warning!</strong> This policy rule does not exist and will be added.".html_safe
          .col-sm-6
            %label
              = check_box_tag :edit_rule_after
              Edit Rule After






    - if current_user.has_role? :manager
      .row
        .col-sm-3
          = f.input :purchase_replacement_code, :required => true, :input_html => {:minlength => 8 , maxlength: 8}
        .col-sm-3
          = f.input :lease_replacement_code, :required => true, :input_html => {:minlength => 8 , maxlength: 8}
        -if mileage_vehicles.include?(asset_type_class_name)
          .col-sm-3
            = f.input :purchase_expansion_code, :required => true, :input_html => {:minlength => 8 , maxlength: 8}
          .col-sm-3
            = f.input :lease_expansion_code, required: true, :input_html => {:minlength => 8 , maxlength: 8}

      .row
        .col-sm-3
          = f.input :engineering_design_code, required: true, :input_html => {:minlength => 8 , maxlength: 8}
        - unless all_vehicles.include?(asset_type_class_name)
          .col-sm-3
            = f.input :construction_code, required: true, :input_html => {:minlength => 8 , maxlength: 8}
        .col-sm-3.ali-code.vehicles.station
          = f.input :rehabilitation_code, required: true, :input_html => {:minlength => 8 , maxlength: 8}

  -#%fieldset
  -#  %legend Rehabilitation
  -#
  -#  .row
  -#    .col-sm-3
  -#      = f.input :rehabilitation_service_month, required: true, :label => "Rehab Month", :input_html => { min: 0 }
  -#
  -#    .col-sm-3
  -#      = f.input :rehabilitation_labor_cost, :wrapper=> :vertical_prepend  do
  -#        %span.input-group-addon
  -#          %i.fa.fa-usd
  -#        = f.input_field :rehabilitation_labor_cost, required: true, :class => "form-control", :input_html => { min: 0 }
  -#
  -#    .col-sm-3
  -#      = f.input :rehabilitation_parts_cost, :wrapper=> :vertical_prepend  do
  -#        %span.input-group-addon
  -#          %i.fa.fa-usd
  -#        = f.input_field :rehabilitation_parts_cost, required: true, :class => "form-control", :input_html => { min: 0 }
  -#  .row
  -#    .col-sm-3
  -#      = f.input :extended_service_life_months, required: true, :label => "Change in ESL (Mo)", :input_html => { :class => 'has_minimum', :min => min_values[:extended_service_life_months] }
  -#
  -#    -if mileage_vehicles.include?(asset_type_class_name)
  -#      .col-sm-3.mileage
  -#        = f.input :extended_service_life_miles, required: true, :label => "Change in ESL (Mi)", :input_html => { :class => 'has_minimum', :min => min_values[:extended_service_life_miles] }
  -#
  -#  - if current_user.has_role? :manager
  -#    .col-sm-3.ali-code.vehicles.station
  -#      = f.input :rehabilitation_code, required: true, :input_html => {:minlength => 8 , maxlength: 8}

  .row
    = f.button :submit, "Save", :class => 'btn btn-primary', :id => 'submit_button'
    %button.btn.btn-default{:data => {:dismiss => "modal"}} Cancel

:javascript

  var asset_class = "#{@asset_type.class_name}";

  if ( $('.alert p:contains("Replace With")').length ) {
    console.log('updating rules');
    $('#rules-container').html("#{escape_javascript(render 'rules')}");
    reset_view();
  }

  $(document).ready(function() {
    // Setup form state
    var checked = $('#policy_asset_subtype_rule_replace_with_new').is(':checked');
    replace_with_new_action(checked);
    checked = $('#policy_asset_subtype_rule_replace_with_leased').is(':checked');
    replace_with_leased_action(checked);

    $("#add-rule-div").hide();
  });

  $('#policy_asset_subtype_rule_asset_subtype_id').on('change', function(event) {
    var id = $(this).val();

    if (parseInt(id) > 0) {
      $('#new_subtype').hide();
      $('#policy_asset_subtype_rule_fuel_type_id').attr('disabled', false);
    } else {
      $('#new_subtype').show();
      $('#policy_asset_subtype_rule_fuel_type_id').attr('disabled', true); // fuel types not allowed on new subtypes. must create universal rule
    }
  });

  // validate the form before submittal
  $('#edit-form').validate({
    submitHandler: function(form) {
      if ($('#edit_rule_after').prop('checked')) {
        console.log('new replace with rule');
      } else {
        $('#rule-modal').modal('hide');

        // Show the spinner while the form request is being handled
        $("#spinner").show();
      }

      $(form).ajaxSubmit();
    }
  });
  if ( $("#policy_asset_subtype_rule_asset_subtype_id" ).length ) {
    $('#policy_asset_subtype_rule_asset_subtype_id').rules("add", {
      required_or_new: true
    });
  }

  $.validator.addMethod("required_or_new", function(value, element) {
    return parseInt(value) > 0 || (($('#new_asset_subtype_name').val() != "") && ($('#new_asset_subtype_description').val() != ""));
  }, "Create a new subtype or select one.");

  $('.has_minimum').each(function (item) {
    $(this).rules( "add", {

      remote: {
        url: "#{get_subtype_minimum_value_policy_path(@policy)}",
        type: "get",
        data: {
          asset_subtype_id: function() {
            return $( "#policy_asset_subtype_rule_asset_subtype_id" ).val();
          }
        }
      }
    });
  });

  function check_replace_rule_exists() {
    var asset_subtype_id = $('#policy_asset_subtype_rule_replace_asset_subtype_id').val();
    var fuel_type_id = $('#policy_asset_subtype_rule_replace_fuel_type_id').val();
    if ((asset_subtype_id == "") && (fuel_type_id == "")) {
      $("#add-rule-div").hide();
      $("#edit_rule_after").prop('checked' , false);
      return;
    }

    if (asset_subtype_id == "") {
      asset_subtype_id = $('#policy_asset_subtype_rule_asset_subtype_id').val();
    }

    if (fuel_type_id == "") {
      fuel_type_id = $('#policy_asset_subtype_rule_fuel_type_id').val();
    }

    $.ajax({
      url: "#{check_subtype_rule_exists_policy_path(@policy)}",
      data: {
        asset_subtype_id: asset_subtype_id,
        fuel_type_id: fuel_type_id
      },
      success: function(result) {
        if (result) {
          $("#add-rule-div").hide();
          $("#edit_rule_after").prop('checked' , false);
        } else {
          $("#add-rule-div").show();
        }
      }
    });
  }

  function replace_with_new_action(checked) {
    if (checked) {
      $('.used').hide().find(':input').val('').attr('disabled', true).removeClass('required');
    } else {
      $('.used').fadeIn().find(':input').val('').attr('disabled', false).addClass('required');
    }
  };

  function replace_with_leased_action(checked) {
    if (checked) {
      $("label[for = policy_asset_subtype_rule_replacement_cost]").html('<abbr title="required">*</abbr> Lease Cost ');
      $("label[for = policy_asset_subtype_rule_lease_length_months]").html('<abbr title="required">*</abbr> Lease Length Months ');
      $('.leased').fadeIn().find(':input').val('').attr('disabled', false).addClass("required");
    } else {
      $("label[for = policy_asset_subtype_rule_replacement_cost]").html('<abbr title="required">*</abbr> Replacement Cost ');
      $('.leased').hide().find(':input').val('').attr('disabled', true).removeClass('required');
    }
  };

  $('#policy_asset_subtype_rule_replace_with_new').on('click', function() {
    var checked = $(this).is(':checked');
    replace_with_new_action(checked);
  });

  $('#policy_asset_subtype_rule_replace_with_leased').on('click', function() {
    var checked = $(this).is(':checked');
    replace_with_leased_action(checked);
  });
