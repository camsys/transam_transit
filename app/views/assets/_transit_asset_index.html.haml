:css
  .flag-column {
    :width: 30px;
  }

// Determine table type for subheader label/table rendering
- if ( lookup_context.template_exists?("revenue_vehicle_table", 'assets', true) && @assets.name == 'RevenueVehicleAssetTableView' )
  - table_type = "Revenue Vehicles"
- elsif ( lookup_context.template_exists?("service_vehicle_table", 'assets', true) && @assets.name == 'ServiceVehicleAssetTableView' )
  - table_type = "Service Vehicles"
- elsif ( lookup_context.template_exists?("facilities_primary_table", 'assets', true) && @assets.name ==  'FacilityPrimaryAssetTableView')
  - table_type = "Facilities"
- elsif ( lookup_context.template_exists?("capital_equipment_table", 'assets', true) && @assets.name ==  'CapitalEquipmentAssetTableView')
  - table_type = "Equipment"
- elsif ( lookup_context.template_exists?("capital_equipment_table", 'assets', true) && @assets.name ==  'InfrastructureAssetTableView')
  - table_type = "Infrastructure"
- elsif (@early_disposition || @transferred_assets)
  - table_type = "Transferred/Disposed Assets"

#subheader-label
  %h2 #{table_type}
  %legend.asset-subheader
    %span = "All #{FtaAssetClass.find(@fta_asset_class_id)}"

#table_actions.btn-toolbar
  .btn-group
    = link_to current_url(format: :xlsx), class: 'btn btn-default', target: '_blank', title: 'Export all rows and columns to XLSX' do
      %i.fa.fa-file
      = " Export All"
  - if (table_type == "Revenue Vehicles")
    = render :partial => "revenue_vehicle_table"
  - elsif (table_type == "Service Vehicles")
    = render :partial => "service_vehicle_table"
  - elsif (table_type == "Facilities")
    = render :partial => "facilities_primary_table"
  - elsif (table_type == "Equipment")
    = render :partial => "capital_equipment_table"
  - elsif (table_type == "Infrastructure")
    = render :partial => "infrastructure_table"
  - elsif (table_type == "Transferred/Disposed Assets")
    = render :partial => "transferred_and_disposed_table"

= render 'shared/table_formatters'

:javascript

  var selected_rows = new Set();

  var manufacturer_id = #{@manufacturer_id.to_i};
  var asset_type = #{@asset_type.to_i};
  var asset_subtype = #{@asset_subtype.to_i};
  var fta_asset_class_id = #{@fta_asset_class_id.to_i};
  var asset_group = #{@asset_group.to_i};
  var org_id = #{@org_id.to_i};
  var early_disposition = #{@early_disposition || false};
  var transferred_assets = #{@transferred_assets || false};

  //TODO writing this out with a longer notation takes considerably more time.
  var path = '#{@early_disposition ? inventory_asset_event_path("x", "event_key") : @transferred_assets ? edit_inventory_path("x") : inventory_path("x")}';

  var ids = #{ @id_filter_list };

  $(document).ready(function() {

    // Disable the table actions
    enable_disable_table_actions();

    // Add a handler for the print action which appends the selected orders to
    // the href
    $(".selected-action").on('click', function(e) {

      //get appropriate bulk update form and then update targets
      $(this).parent().children("input[name='targets']").val(Array.from(selected_rows));
      return true;
    });
  });

  function row_style(row, index) {
    return 'action-path';
  };

  //TODO for now the has to be names query_params by convention to work with multi-select.
  function query_params(params) {
    if (manufacturer_id > 0) {
      params.manufacturer_id = manufacturer_id;
    }
    if (asset_type > 0) {
      params.asset_type = asset_type;
    }
    if (org_id > 0) {
      params.org_id = org_id;
    }
    if (asset_subtype > 0) {
      params.asset_subtype = asset_subtype;
    }
    if (fta_asset_class_id > 0) {
      params.fta_asset_class_id = fta_asset_class_id;
    }
    if (asset_group > 0) {
      params.asset_group = asset_group;
    }
    if (ids.length > 0){
      params.ids = ids;
    }
    if (early_disposition) {
      params.early_disposition = 1;
    }
   if (transferred_assets) {
      params.transferred_assets = 1;
    }

    return params;
  }

  $('#asset_server_table').on('check.bs.table', function(e, row) {
    update_selected();
  }).on('uncheck.bs.table', function(e, row) {
    update_selected();
  }).on('check-all.bs.table', function(e, row) {
    update_selected();
  }).on('uncheck-all.bs.table', function(e, row) {
    update_selected();
  }).on('click-row.bs.table', function (e, row, $element) {
    if (!$($element.context).hasClass('bs-checkbox')) {
      var url = path.replace("x", row['object_key']);
      if(early_disposition) {
        url = url.replace("event_key", row['early_disposition_event_object_key']);
      }
      document.location.href = url;
    }
  }).on('sort.bs.table', function(e, name, order) {
    $('#asset_server_table').bootstrapTable('selectPage', 1);
  }).on('post-body.bs.table', function() {
    $('.fixed-table-container').css('min-height', '300px');
    $('#asset_server_table > tbody > tr').addClass('action-path');
  }).on('load-success.bs.table', function() {
    // Table reloaded, clear saved selection
    selected_rows = new Set();
    enable_disable_table_actions();
  });

  // Enables or disables the package actions depending on how many are selected
  function enable_disable_table_actions() {
    var num = selected_rows.size;
    if (num > 0) {
      $('.selected-action').removeClass('disabled');
    } else {
      $('.selected-action').addClass('disabled');
    }
  };

  // Updates the selected rows in the table
  function update_selected() {
    var selected = $('#asset_server_table').bootstrapTable('getSelections');
    selected_rows = new Set();
    for (i = 0; i < selected.length; i++) {
      //console.log(selected[i]);
      if(early_disposition) {
        selected_rows.add(selected[i].early_disposition_event_object_key);
      } else {
        selected_rows.add(selected[i].object_key);
      }

    }
    //console.log(selected_rows);
    enable_disable_table_actions();
  };

  // Removes an object identified by its object key from the set of objects selected
  function remove_from_selected(object_key) {
    selected_rows.delete(object_key);
    enable_disable_table_actions();
  };

  $(window).resize(function() {
    $('#asset_server_table').bootstrapTable('resetView');
  });
